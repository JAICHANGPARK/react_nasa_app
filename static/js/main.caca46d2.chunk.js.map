{"version":3,"sources":["components/ViewerTemplate/ViewerTemplate.js","components/SpaceNavigator/SpaceNavigator.js","components/Viewer/Viewer.js","lib/api.js","App.js","serviceWorker.js","index.js","components/ViewerTemplate/ViewerTemplate.scss","components/SpaceNavigator/SpaceNavigator.scss","components/Viewer/Viewer.scss"],"names":["cx","classNames","bind","styles","ViewerTemplate","_ref","viewer","spaceNavigator","react_default","a","createElement","className","SpaceNavigator","onPrev","onNext","onClick","index_esm","Viewer","mediaType","url","loading","dist","color","size","window","open","src","alt","title","frameBorder","gesture","allow","allowFullScreen","getAPOD","date","arguments","length","undefined","axios","get","concat","App","state","maxDate","urL","_callee","response","_response$data","retrievedDate","regenerator_default","wrap","_context","prev","next","_this","abrupt","setState","api","sent","data","media_type","t0","console","log","stop","handlePrev","prevDate","moment","subtract","format","handleNext","_this$state","nextDate","add","this","_this$state2","components_ViewerTemplate_ViewerTemplate","components_SpaceNavigator_SpaceNavigator","components_Viewer_Viewer","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","viewer-template","viewer-wrapper","space-navigator","end","left","right","circle"],"mappings":"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","file":"static/js/main.caca46d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport styles from \"./ViewerTemplate.scss\";\r\nimport classNames from \"classnames/bind\";\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst ViewerTemplate = ({ viewer, spaceNavigator }) => {\r\n  return (\r\n    <div className={cx(\"viewer-template\")}>\r\n      <header>Astronomy Picture of the Day</header>\r\n      <div className={cx(\"viewer-wrapper\")}>\r\n        {viewer}\r\n        <div className={cx(\"space-navigator-wrapper\")}>{spaceNavigator}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewerTemplate;\r\n","import React from 'react';\r\nimport styles from './SpaceNavigator.scss';\r\nimport classNames from 'classnames/bind';\r\nimport {MdChevronLeft} from 'react-icons/md';\r\nimport {MdChevronRight} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst SpaceNavigator = ({ onPrev, onNext }) => {\r\n  return (\r\n   <div className={cx('space-navigator')}>\r\n    <div className={cx('left', 'end')}>\r\n      <div className={cx('circle')} onClick={onPrev}>\r\n        <MdChevronLeft/>\r\n      </div>\r\n    </div>\r\n    <div className={cx('right', 'end')}>\r\n      <div className={cx('circle')} onClick={onNext}>\r\n        <MdChevronRight/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default SpaceNavigator;","import React from 'react';\r\nimport styles from './Viewer.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport {\r\n  ChasingDots\r\n} from 'better-react-spinkit'\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Viewer = ({mediaType, url, loading}) => {\r\n  if(loading) {\r\n    // 로딩중일때 로더 보여주기\r\n    return <div className={cx('viewer')}>\r\n      <ChasingDots color=\"white\" size={60}/>\r\n    </div>\r\n  }\r\n\r\n  \r\n  if(!url) return null;\r\n\r\n  return (\r\n    <div className={cx('viewer')}>\r\n      {\r\n        mediaType === 'image' ? (\r\n          <img onClick={() => window.open(url)} src={url} alt=\"space\"/>\r\n        ) : (\r\n          <iframe title=\"space-video\" src={url} frameBorder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowFullScreen></iframe>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Viewer;","import axios from 'axios';\r\n\r\nexport function getAPOD(date = '') {\r\n  return axios.get(`https://api.nasa.gov/planetary/apod?api_key=Dc4HT7QgvhZ9Hu4EnaZmNGzKNydD5v7fvFOEH0VP&date=${date}`);\r\n}","import React, { Component } from \"react\";\nimport ViewerTemplate from \"./components/ViewerTemplate\";\nimport SpaceNavigator from \"./components/SpaceNavigator\";\nimport Viewer from \"./components/Viewer\";\n\nimport * as api from \"./lib/api\";\n\nimport moment from 'moment';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    maxDate: null,\n    date: null,\n    urL: null,\n    mediaType: null\n  };\n\n  getAPOD = async date => {\n    if (this.state.loading) return; // 이미 요청중이라면 무시\n\n    // 로딩 상태 시작\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const response = await api.getAPOD(date);\n      // 비구조화 할당 + 새로운 이름\n      const { date: retrievedDate, url, media_type: mediaType } = response.data;\n      if (!this.state.maxDate) {\n        // 만약에 maxDate 가 없으면 지금 받은 date 로 지정\n        this.setState({\n          maxDate: retrievedDate\n        });\n      }\n\n      // 전달받은 데이터 넣어주기\n      this.setState({\n        date: retrievedDate,\n        mediaType,\n        url\n      });\n    } catch (e) {\n      console.log(e);\n    }\n\n    // 로딩 상태 종료\n    this.setState({\n      loading: false\n    });\n\n    // api.getAPOD(date).then((res)=>{\n\n    // });\n  };\n  componentDidMount() {\n    this.getAPOD();\n  }\n\n  handlePrev = () => {\n    const { date } = this.state;\n    const prevDate = moment(date).subtract(1, 'days').format('YYYY-MM-DD');\n    console.log(prevDate);\n    this.getAPOD(prevDate);\n  }\n\n  handleNext = () => {\n    const { date, maxDate } = this.state;\n    if(date === maxDate) return;\n    const nextDate = moment(date).add(1, 'days').format('YYYY-MM-DD');\n    this.getAPOD(nextDate);\n  }\n\n  render() {\n    const { url, mediaType, loading } = this.state;\n    const { handlePrev, handleNext } = this;\n    return (\n      // <div >\n\n      // </div>\n      <ViewerTemplate\n        spaceNavigator={<SpaceNavigator onPrev={handlePrev} onNext={handleNext}/>}\n        viewer={(\n          <Viewer \n            url={url}\n            mediaType={mediaType}\n            loading={loading}/>\n        )}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/base.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewer-template\":\"ViewerTemplate__viewer-template__3a7Bk\",\"viewer-wrapper\":\"ViewerTemplate__viewer-wrapper__2dNN8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"space-navigator\":\"SpaceNavigator__space-navigator__3s066\",\"end\":\"SpaceNavigator__end__8FRj5\",\"left\":\"SpaceNavigator__left__2ngFh\",\"right\":\"SpaceNavigator__right__2X3Fi\",\"circle\":\"SpaceNavigator__circle__u1b34\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewer\":\"Viewer__viewer__3C7AI\"};"],"sourceRoot":""}